from .ebm.probability import log_distributions
from .ebm.mcmc import greedy_ascent, mcmc
from .ebm.likelihood import EventProbabilities
from .ebm.transformer import ContinuousDistributionFitter
from scipy.stats import norm, spearmanr
import numpy as np

class EBMAnalyzer:
    def __init__(self, X, y, distribution=norm, **dist_params):
        self.X = X
        self.y = y
        self.distribution = distribution
        self.dist_params = dist_params

    def perform_analysis(self):
        # compute log probabilities
        log_p_e, log_p_not_e = log_distributions(self.X, self.y, point_proba=False, distribution=self.distribution, **self.dist_params)

        # greedy ascent to find an initial good order
        starting_order = np.arange(self.X.shape[1])  # initialize order based on feature count
        np.random.shuffle(starting_order)  # shuffle starting order

        order, loglike, update_iters = greedy_ascent(log_p_e, log_p_not_e,
                                                     n_iter=10_000, order=starting_order,
                                                     random_state=2020)
        
        # mcmc to sample from the posterior distribution of orders
        orders, loglike, update_iters, probas = mcmc(log_p_e, log_p_not_e,
                                                     order=order, n_iter=500_000,
                                                     random_state=2020)
        
        # print greedy ascent result
        print(f"Greedy Ascent Result: {order}")
        
        # check if orders list is empty
        if len(orders) == 0:
            print("No orders generated by MCMC.")
            return None, None, loglike, update_iters, probas

        # compute spearman's rho for the initial and first mcmc order
        ideal_order = np.arange(self.X.shape[1])
        rho, _ = spearmanr(ideal_order, orders[0])

        return orders[:10], rho, loglike, update_iters, probas

    def print_orders(self, orders, num_orders=10):
        if orders is not None:
            print(f"First {num_orders} MCMC sampled orders:", orders[:num_orders])
        else:
            print("No orders to display.")

    def compute_spearman_rho(self, orders):
        ideal_order = np.arange(self.X.shape[1])
        rho_values = [spearmanr(ideal_order, order)[0] for order in orders]
        return rho_values
